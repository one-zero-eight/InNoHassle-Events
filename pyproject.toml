[tool.poetry]
name = "innohassle-events"
version = "0.1.0"
description = ""
authors = ["Ruslan Bel'kov <ruslan.belckov@yandex.ru>"]
readme = "README.md"
packages = []

[tool.poetry.dependencies]
python = "~3.11"
sqlalchemy = { extras = ["postgresql_asyncpg"], version = "^2.0.18" }
pydantic = { extras = ["dotenv"], version = "^1.10.11" }
fastapi = { extras = ["all"], version = "^0.99.1" }
authlib = "^1.2.1"
cryptography = "^41.0.2"

[tool.poetry.group.prod.dependencies]
gunicorn = "20.1.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.277"
black = "^23.3.0"
pre-commit = "^3.3.3"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
faker = "^18.13.0"

[tool.pytest.ini_options]
pythonpath = "."
testpaths = "tests"
addopts = [
    "--strict-config",
    "--strict-markers",
]

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
[tool.coverage.run]
omit = [
    "src/dev.py"
]
[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if enabled:",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain about TYPE_CHECKING imports:
    "if TYPE_CHECKING:",
]

ignore_errors = true
