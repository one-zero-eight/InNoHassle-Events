import asyncio
from pathlib import Path

import aiofiles
import icalendar
from fastapi import HTTPException
from starlette.responses import FileResponse

from src.app.dependencies import (
    EVENT_GROUP_REPOSITORY_DEPENDENCY,
    USER_REPOSITORY_DEPENDENCY,
    CURRENT_USER_ID_DEPENDENCY,
)
from src.app.users import router
from src.exceptions import (
    UserNotFoundException,
    DBEventGroupDoesNotExistInDb,
    EventGroupNotFoundException,
)
from src.repositories.predefined import PredefinedRepository
from src.schemas import ViewUser

auth_responses_schema = {
    401: {"description": "No credentials provided"},
    403: {"description": "Could not validate credentials"},
}


@router.get(
    "/me",
    responses={
        200: {"description": "Current user info"},
        **auth_responses_schema,
    },
)
async def get_me(
    user_id: CURRENT_USER_ID_DEPENDENCY,
    user_repository: USER_REPOSITORY_DEPENDENCY,
) -> ViewUser:
    """
    Get current user info if authenticated
    """
    user = await user_repository.read(user_id)
    user: ViewUser
    return user


@router.get(
    "/ics/{user_id}",
    responses={
        200: {"description": "ICS file with schedule based on favorites (non-hidden)"},
        **auth_responses_schema,
    },
)
async def get_my_schedule(
    user_id: int,
    user_repository: USER_REPOSITORY_DEPENDENCY,
) -> FileResponse:
    """
    Get schedule in ICS format for the user
    """
    user = await user_repository.read(user_id)
    user: ViewUser
    nonhidden = []
    for association in user.favorites_association:
        if not association.hidden:
            nonhidden.append(association)
    paths = set()
    for association in nonhidden:
        event_group = association.event_group
        if event_group.path is None:
            raise HTTPException(
                status_code=501,
                detail="Can not create .ics file for event group on the fly (set static .ics file for the event group",
            )
        ics_path = PredefinedRepository.locate_ics_by_path(event_group.path)
        paths.add(ics_path)

    async def _async_read_schedule(ics_path: Path):
        async with aiofiles.open(ics_path, "r") as f:
            content = await f.read()
            calendar = icalendar.Calendar.from_ical(content)
            return calendar

    tasks = [_async_read_schedule(ics_path) for ics_path in paths]
    calendars = await asyncio.gather(*tasks)
    main_calendar = icalendar.Calendar(
        prodid="-//one-zero-eight//InNoHassle Schedule",
        version="2.0",
        method="PUBLISH",
    )

    main_calendar["x-wr-calname"] = f"{user.email} schedule from innohassle.ru"
    main_calendar["x-wr-timezone"] = "Europe/Moscow"
    main_calendar["x-wr-caldesc"] = "Generated by InNoHassle Schedule"

    for calendar in calendars:
        calendar: icalendar.Calendar
        vevents = calendar.walk(name="VEVENT")
        main_calendar.subcomponents.extend(vevents)

    async with aiofiles.tempfile.NamedTemporaryFile("wb", prefix="tmp", suffix=".ics", delete=False) as f:
        await f.write(main_calendar.to_ical())
        await f.seek(0)
        return FileResponse(path=f.name)


@router.post(
    "/me/favorites",
    responses={
        200: {"description": "Favorite added successfully"},
        404: {"description": "Event group not found"},
        **auth_responses_schema,
    },
)
async def add_favorite(
    user_id: CURRENT_USER_ID_DEPENDENCY,
    user_repository: USER_REPOSITORY_DEPENDENCY,
    group_id: int,
) -> ViewUser:
    """
    Add favorite to current user
    """
    try:
        updated_user = await user_repository.add_favorite(user_id, group_id)
        updated_user: ViewUser
        return updated_user
    except DBEventGroupDoesNotExistInDb as e:
        raise EventGroupNotFoundException() from e


@router.delete(
    "/me/favorites",
    responses={
        200: {"description": "Favorite deleted"},
        **auth_responses_schema,
    },
)
async def delete_favorite(
    user_id: CURRENT_USER_ID_DEPENDENCY,
    user_repository: USER_REPOSITORY_DEPENDENCY,
    group_id: int,
) -> ViewUser:
    """
    Delete favorite from current user
    """
    updated_user = await user_repository.remove_favorite(user_id, group_id)
    updated_user: ViewUser
    return updated_user


@router.post(
    "/me/favorites/hide",
    responses={
        200: {"description": "Favorite hidden"},
        **auth_responses_schema,
    },
)
async def hide_favorite(
    user_id: CURRENT_USER_ID_DEPENDENCY,
    event_group_repository: EVENT_GROUP_REPOSITORY_DEPENDENCY,
    user_repository: USER_REPOSITORY_DEPENDENCY,
    group_id: int,
    hide: bool = True,
) -> ViewUser:
    """
    Hide favorite from current user
    """
    # check if a group exists
    if await event_group_repository.read(group_id) is None:
        raise UserNotFoundException()

    updated_user = await user_repository.set_hidden(user_id=user_id, group_id=group_id, hide=hide)
    updated_user: ViewUser
    return updated_user
