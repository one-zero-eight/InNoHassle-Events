import asyncio
from pathlib import Path
from typing import AsyncGenerator

import aiofiles
import icalendar
from fastapi import HTTPException
from starlette.requests import Request
from starlette.responses import FileResponse, StreamingResponse, RedirectResponse

from src.app.dependencies import (
    EVENT_GROUP_REPOSITORY_DEPENDENCY,
    USER_REPOSITORY_DEPENDENCY,
    TAG_REPOSITORY_DEPENDENCY,
    VERIFY_PARSER_DEPENDENCY,
)
from src.app.root import router
from src.config import settings, Environment
from src.exceptions import (
    EventGroupNotFoundException,
    UserNotFoundException,
    IncorrectCredentialsException,
    NoCredentialsException,
)
from src.repositories.predefined import PredefinedRepository
from src.schemas import ViewUser


@router.get(
    "/{event_group_alias}.ics",
    response_class=FileResponse,
    responses={
        200: {
            "description": "ICS file with schedule of the event-group",
            "content": {"text/calendar": {"schema": {"type": "string", "format": "binary"}}},
        },
        **EventGroupNotFoundException.responses,
    },
    tags=["Ics files"],
)
async def get_event_group_ics_by_alias(
    user_id: int, export_type: str, event_group_alias: str, event_group_repository: EVENT_GROUP_REPOSITORY_DEPENDENCY
):
    """
    Get event group .ics file by id
    """
    event_group = await event_group_repository.read_by_alias(event_group_alias)

    if event_group is None:
        raise EventGroupNotFoundException()
    if event_group.path:
        ics_path = PredefinedRepository.locate_ics_by_path(event_group.path)
        return FileResponse(ics_path, media_type="text/calendar")
    else:
        # TODO: create ics file on the fly from events connected to event group
        raise HTTPException(
            status_code=501, detail="Can not create .ics file on the fly (set static .ics file for the event group"
        )


async def _generate_ics_from_multiple(user: ViewUser, *ics: Path) -> AsyncGenerator[bytes, None]:
    async def _async_read_schedule(ics_path: Path):
        async with aiofiles.open(ics_path, "r") as f:
            content = await f.read()
            calendar = icalendar.Calendar.from_ical(content)
            return calendar

    tasks = [_async_read_schedule(ics_path) for ics_path in ics]
    calendars = await asyncio.gather(*tasks)
    main_calendar = icalendar.Calendar(
        prodid="-//one-zero-eight//InNoHassle Schedule",
        version="2.0",
        method="PUBLISH",
    )
    main_calendar["x-wr-calname"] = f"{user.email} schedule from innohassle.ru"
    main_calendar["x-wr-timezone"] = "Europe/Moscow"
    main_calendar["x-wr-caldesc"] = "Generated by InNoHassle Schedule"
    ical_bytes = main_calendar.to_ical()
    # remove END:VCALENDAR
    ical_bytes = ical_bytes[:-13]
    yield ical_bytes

    for calendar in calendars:
        calendar: icalendar.Calendar
        vevents = calendar.walk(name="VEVENT")
        for vevent in vevents:
            yield vevent.to_ical()
    yield b"END:VCALENDAR"


@router.get(
    "/users/{user_id}.ics",
    responses={
        200: {
            "description": "ICS file with schedule based on favorites (non-hidden)",
            "content": {"text/calendar": {"schema": {"type": "string", "format": "binary"}}},
        },
        **UserNotFoundException.responses,
    },
    tags=["Ics files"],
)
async def get_user_schedule(
    user_id: int,
    user_repository: USER_REPOSITORY_DEPENDENCY,
) -> StreamingResponse:
    """
    Get schedule in ICS format for the user
    """
    user = await user_repository.read(user_id)

    if user is None:
        raise UserNotFoundException()

    user: ViewUser
    nonhidden = []
    for association in user.favorites_association:
        if not association.hidden:
            nonhidden.append(association)
    paths = set()
    for association in nonhidden:
        event_group = association.event_group
        if event_group.path is None:
            raise HTTPException(
                status_code=501,
                detail="Can not create .ics file for event group on the fly (set static .ics file for the event group",
            )
        ics_path = PredefinedRepository.locate_ics_by_path(event_group.path)
        paths.add(ics_path)

    ical_generator = _generate_ics_from_multiple(user, *paths)

    return StreamingResponse(
        # AsyncIterator[bytes]
        content=ical_generator,
        media_type="text/calendar",
    )


@router.get(
    "/update-predefined-data",
    responses={
        200: {
            "description": "Predefined data updated successfully",
        },
        **IncorrectCredentialsException.responses,
        **NoCredentialsException.responses,
    },
    tags=["System"],
    include_in_schema=settings.ENVIRONMENT == Environment.DEVELOPMENT,
)
async def update_predefined_data(
    _: VERIFY_PARSER_DEPENDENCY,
    event_group_repository: EVENT_GROUP_REPOSITORY_DEPENDENCY,
    tag_repository: TAG_REPOSITORY_DEPENDENCY,
    user_repository: USER_REPOSITORY_DEPENDENCY,
):
    from src.utils import setup_predefined_data

    await setup_predefined_data(
        event_group_repository=event_group_repository,
        tag_repository=tag_repository,
        user_repository=user_repository,
    )


@router.get("/", tags=["System"], include_in_schema=False)
async def redirect_from_root(request: Request):
    # Redirect to docs
    return RedirectResponse(request.url_for("swagger_ui_html"), status_code=302)
